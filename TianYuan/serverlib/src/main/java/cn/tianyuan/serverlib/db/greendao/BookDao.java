package cn.tianyuan.serverlib.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.tianyuan.serverlib.db.been.Book;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK".
*/
public class BookDao extends AbstractDao<Book, String> {

    public static final String TABLENAME = "BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property TypeId = new Property(2, String.class, "typeId", false, "TYPE_ID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Descriptor = new Property(4, String.class, "descriptor", false, "DESCRIPTOR");
        public final static Property Price = new Property(5, int.class, "price", false, "PRICE");
        public final static Property SellSum = new Property(6, int.class, "sellSum", false, "SELL_SUM");
        public final static Property StoreSum = new Property(7, int.class, "storeSum", false, "STORE_SUM");
        public final static Property AddTime = new Property(8, long.class, "addTime", false, "ADD_TIME");
        public final static Property Picture = new Property(9, String.class, "picture", false, "PICTURE");
    }


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"TYPE_ID\" TEXT," + // 2: typeId
                "\"NAME\" TEXT," + // 3: name
                "\"DESCRIPTOR\" TEXT," + // 4: descriptor
                "\"PRICE\" INTEGER NOT NULL ," + // 5: price
                "\"SELL_SUM\" INTEGER NOT NULL ," + // 6: sellSum
                "\"STORE_SUM\" INTEGER NOT NULL ," + // 7: storeSum
                "\"ADD_TIME\" INTEGER NOT NULL ," + // 8: addTime
                "\"PICTURE\" TEXT);"); // 9: picture
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Book entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindString(3, typeId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String descriptor = entity.getDescriptor();
        if (descriptor != null) {
            stmt.bindString(5, descriptor);
        }
        stmt.bindLong(6, entity.getPrice());
        stmt.bindLong(7, entity.getSellSum());
        stmt.bindLong(8, entity.getStoreSum());
        stmt.bindLong(9, entity.getAddTime());
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(10, picture);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindString(3, typeId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String descriptor = entity.getDescriptor();
        if (descriptor != null) {
            stmt.bindString(5, descriptor);
        }
        stmt.bindLong(6, entity.getPrice());
        stmt.bindLong(7, entity.getSellSum());
        stmt.bindLong(8, entity.getStoreSum());
        stmt.bindLong(9, entity.getAddTime());
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(10, picture);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // typeId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // descriptor
            cursor.getInt(offset + 5), // price
            cursor.getInt(offset + 6), // sellSum
            cursor.getInt(offset + 7), // storeSum
            cursor.getLong(offset + 8), // addTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // picture
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTypeId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDescriptor(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPrice(cursor.getInt(offset + 5));
        entity.setSellSum(cursor.getInt(offset + 6));
        entity.setStoreSum(cursor.getInt(offset + 7));
        entity.setAddTime(cursor.getLong(offset + 8));
        entity.setPicture(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Book entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Book entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Book entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
