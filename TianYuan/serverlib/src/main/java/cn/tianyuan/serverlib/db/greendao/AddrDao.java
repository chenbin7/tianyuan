package cn.tianyuan.serverlib.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.tianyuan.serverlib.db.been.Addr;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADDR".
*/
public class AddrDao extends AbstractDao<Addr, String> {

    public static final String TABLENAME = "ADDR";

    /**
     * Properties of entity Addr.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property Addres = new Property(2, String.class, "addres", false, "ADDRES");
        public final static Property CommunityName = new Property(3, String.class, "communityName", false, "COMMUNITY_NAME");
        public final static Property AddrDetail = new Property(4, String.class, "addrDetail", false, "ADDR_DETAIL");
        public final static Property FullAddr = new Property(5, String.class, "fullAddr", false, "FULL_ADDR");
    }


    public AddrDao(DaoConfig config) {
        super(config);
    }
    
    public AddrDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADDR\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"ADDRES\" TEXT," + // 2: addres
                "\"COMMUNITY_NAME\" TEXT," + // 3: communityName
                "\"ADDR_DETAIL\" TEXT," + // 4: addrDetail
                "\"FULL_ADDR\" TEXT);"); // 5: fullAddr
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADDR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Addr entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String addres = entity.getAddres();
        if (addres != null) {
            stmt.bindString(3, addres);
        }
 
        String communityName = entity.getCommunityName();
        if (communityName != null) {
            stmt.bindString(4, communityName);
        }
 
        String addrDetail = entity.getAddrDetail();
        if (addrDetail != null) {
            stmt.bindString(5, addrDetail);
        }
 
        String fullAddr = entity.getFullAddr();
        if (fullAddr != null) {
            stmt.bindString(6, fullAddr);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Addr entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String addres = entity.getAddres();
        if (addres != null) {
            stmt.bindString(3, addres);
        }
 
        String communityName = entity.getCommunityName();
        if (communityName != null) {
            stmt.bindString(4, communityName);
        }
 
        String addrDetail = entity.getAddrDetail();
        if (addrDetail != null) {
            stmt.bindString(5, addrDetail);
        }
 
        String fullAddr = entity.getFullAddr();
        if (fullAddr != null) {
            stmt.bindString(6, fullAddr);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Addr readEntity(Cursor cursor, int offset) {
        Addr entity = new Addr( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // addres
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // communityName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // addrDetail
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // fullAddr
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Addr entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAddres(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCommunityName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddrDetail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFullAddr(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Addr entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Addr entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Addr entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
